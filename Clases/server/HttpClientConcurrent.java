import java.io.IOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.CompletableFuture;

public class HttpClientConcurrent {

    private static final HttpClient httpClient = HttpClient.newBuilder()
            .version(HttpClient.Version.HTTP_1_1)
            .connectTimeout(Duration.ofSeconds(10))
            .build();

    public static void main(String[] args) throws IOException, InterruptedException {

        BigInteger number = new BigInteger

        CompletableFuture<String>[] futures = new CompletableFuture[4]; // Array para almacenar las CompletableFuture

        // IPs de los servidores
        String[] serverIPs = {"http://localhost:8080", "http://localhost:8081", "http://localhost:8082", "http://localhost:8083"};

        // Enviar solicitudes a cuatro servidores diferentes al mismo tiempo
        for (int i = 0; i < 4; i++) {
            futures[i] = sendRequest(number, serverIPs[i]);
        }

        // Combinar todas las CompletableFuture en una sola CompletableFuture
        CompletableFuture<Void> allOfFuture = CompletableFuture.allOf(futures);

        // Esperar hasta que todas las solicitudes hayan sido completadas
        allOfFuture.join();

        // Imprimir las respuestas
        for (int i = 0; i < 4; i++) {
            System.out.println("Response from server " + (i+1) + ": " + futures[i].join());
        }
    }

    private static CompletableFuture<String> sendRequest(BigInteger number, String serverIP) {
        HttpRequest request = HttpRequest.newBuilder()
                .POST(HttpRequest.BodyPublishers.ofString(number.toString())) // Enviar el nÃºmero como cuerpo de la solicitud POST
                .uri(URI.create(serverIP + "/sumafibonacci")) // Endpoint sumafibonacci
                .header("Content-Type", "text/plain")
                .header("X-Debug", "true")
                .build();

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenCompose(response -> CompletableFuture.completedFuture(response.headers().toString() + response.body()));
    }
}
